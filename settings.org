#+TITLE: Emacs Initialization File
#+AUTHOR: Barton L. Brown
* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Barton L. Brown"
        user-mail-address "bartonlbrown@gmail.com")
#+END_SRC
* Programming
** C++ Indent
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux" c-basic-offset 5)
#+END_SRC
** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode) 
      )
#+END_SRC
** Company Mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (use-package company-irony :ensure t :defer t)
    (use-package company-anaconda :ensure t :defer t)
    (setq company-idle-delay              nil
          company-minimum-prefix-length   2
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil
          company-backends                '((company-irony company-gtags company-anaconda))
          )
    )
#+End_SRC
** Irony Mode
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

    ;; (optional) bind TAB for indent-or-complete
    (defun irony--check-expansion () 
      (save-excursion (if (looking-at "\\_>") t (backward-char 1) (if (looking-at "\\.") t (backward-char 1) (if (looking-at "->") t nil))))) 
    (defun irony--indent-or-complete () 
      "Indent or Complete" (interactive) (cond ((and (not (use-region-p)) (irony--check-expansion)) (message "complete") (company-complete-common)) (t (message "indent") (call-interactively 'c-indent-line-or-region))))
    (defun irony-mode-keys () 
      "Modify keymaps used by `irony-mode'." (local-set-key (kbd "TAB") 'irony--indent-or-complete) (local-set-key [tab] 'irony--indent-or-complete))
    (add-hook 'c-mode-common-hook 'irony-mode-keys)

    )
#+END_SRC
** Python Environments
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :config
    (setenv "WORKON_HOME" "/home/bartonlbrown/anaconda3/envs")
    (add-hook 'python-mode-hook 'pyvenv-mode)
    (pyvenv-workon "py3") ;; start in python 3 environment
  )

#+END_SRC
** Anaconda Mode
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :defer t
    :init
    (add-hook 'python-mode-hook 'anaconda-mode)
    :config
    ;;bind TAB for indent-or-complete
    (defun anaconda--check-expansion () 
      (save-excursion (if (looking-at "\\_>") t (backward-char 1) (if (looking-at "\\.") t (backward-char 1) (if (looking-at "->") t nil))))) 
    (defun anaconda--indent-or-complete () 
      "Indent or Complete" (interactive) (cond ((and (not (use-region-p)) (anaconda--check-expansion)) (message "complete") (company-complete-common)) (t (message "indent") (call-interactively 'c-indent-line-or-region))))
    (defun anaconda-mode-keys () 
      "Modify keymaps used by `anaconda-mode'." (local-set-key (kbd "TAB") 'anaconda--indent-or-complete) (local-set-key [tab] 'anaconda--indent-or-complete))
    (add-hook 'python-mode-hook 'anaconda-mode-keys)

    )
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-x g"       . magit-status)
     )
    )
#+END_SRC
* Org Mode
** Key Mappings
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\M-h" 'org-mark-element)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key (kbd "<S-prior>") 'org-move-subtree-up)
  (global-set-key (kbd "<S-next>") 'org-move-subtree-down)
#+END_SRC
** Variables
#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
  (setq org-startup-indented t)
  (setq org-use-speed-commands (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-hide-emphasis-markers t)
  (setq org-tags-column 0)
  (setq org-todo-keyword-faces
        '(("TODO" . "red")
          ("[TODO]" . "red")
          ("DRAFT" . "yellow")
          ("[DRAFT]" . "yellow")
          ("DONE" . "green")
          ("[DONE]" . "green")
          ("CANCELED" . "blue")
          ("[CANCELED]" . "blue")))
  (setq org-agenda-files (list "~/org/work.org"
                               "~/org/school.org" 
                               "~/org/home.org"))
  (setq org-src-fontify-natively t);;org mode code block color
  (setq org-src-tab-acts-natively t);;org mode code block tabs
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (add-hook 'after-save-hook 'org-babel-tangle 'run-at-end 'only-in-org-mode)
  (add-hook 'org-babel-pre-tangle-hook (lambda ()
                                           (setq zz/pre-tangle-time (current-time))))
  (add-hook 'org-babel-post-tangle-hook (lambda ()
                                          (message "org-babel-tangle took %s"
                                                   (format "%.2f seconds"
                                                           (float-time (time-since zz/pre-tangle-time))))))
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (add-hook 'after-init-hook 'global-visual-line-mode)

#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex     . t)
     (gnuplot   . t)
     (python    . t)
     (shell     . t)
     (calc      . t)
     (dot       . t)))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
  (use-package ox-twbs
    :ensure t
    :defer t
    )
#+END_SRC
** Pretty Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
#+END_SRC
** Code Block
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (tempo-define-template "emacs-lisp"
                         '("#+BEGIN_SRC emacs-lisp\n" p "\n#+END_SRC" >)
                         "<ss"
                         "Insert an elisp code block")
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind
    (("C-x C-f"       . helm-find-files)
     ("C-x C-b"       . helm-buffers-list)
     ("C-x b"         . helm-multi-files)
     ("M-x"           . helm-M-x)
     :map helm-find-files-map
     ("C-<backspace>" . helm-find-files-up-one-level)
     ("C-f"           . helm-execute-persistent-action)
     ([tab]           . helm-ff-RET))
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-echo-input-in-header-line nil)
    :init
    (helm-mode 1))

  (require 'helm-config)
  (helm-autoresize-mode 1)

  (use-package helm-swoop
    :ensure t
    :bind
    ("C-s" . helm-swoop))

  (global-set-key (kbd "M-y") 'helm-show-kill-ring)

#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :config 
    (setq tramp-default-method "ssh")
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path);;use remote path with shell in tramp
    )
#+END_SRC
* Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :bind (
           ( "C-c m" . mc/mark-all-like-this)
           )
    )
#+END_SRC
* Ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure t
    :defer t
    :init
    (setq diff-switches               "-u"
          ediff-custom-diff-options   "-U3"
          ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain)

    (add-hook 'ediff-startup-hook 'ediff-toggle-wide-display)
    (add-hook 'ediff-cleanup-hook 'ediff-toggle-wide-display)
    (add-hook 'ediff-suspend-hook 'ediff-toggle-wide-display))
#+END_SRC
* Wgrep
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    )
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
  ;;eval and replace
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))

  (global-set-key (kbd "C-c C-e") 'eval-and-replace)
#+End_SRC
* Miscellaneous
** Hide Menu Bar and Tool Bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** Turn Off Startup Message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Empty Scratch
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode)
  (setq linum-format "%d ");;add space after line number
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
#+END_SRC
** Font Size
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Cousine-16" ))
#+End_SRC
** CUA copy-paste mode
#+BEGIN_SRC emacs-lisp
(cua-mode t)
#+END_SRC
** Custom Variables
#+BEGIN_SRC emacs-lisp
   (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(ansi-color-faces-vector
      [default bold shadow italic underline bold bold-italic bold])
    '(ansi-color-names-vector
      (vector "#515151" "#f2777a" "#99cc99" "#ffcc66" "#6699cc" "#cc99cc" "#66cccc" "#cccccc"))
    '(beacon-color "#f2777a")
    '(company-quickhelp-color-background "#4F4F4F")
    '(company-quickhelp-color-foreground "#DCDCCC")
    '(compilation-message-face (quote default))
    '(cua-global-mark-cursor-color "#2aa198")
    '(cua-normal-cursor-color "#657b83")
    '(cua-overwrite-cursor-color "#b58900")
    '(cua-read-only-cursor-color "#859900")
    '(custom-enabled-themes (quote (sanityinc-tomorrow-bright)))
    '(custom-safe-themes
      (quote
       ("c3d4af771cbe0501d5a865656802788a9a0ff9cf10a7df704ec8b8ef69017c68" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" "190a9882bef28d7e944aa610aa68fe1ee34ecea6127239178c7ac848754992df" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "e297f54d0dc0575a9271bb0b64dad2c05cff50b510a518f5144925f627bb5832" default)))
    '(fci-rule-color "#515151")
    '(flycheck-color-mode-line-face-to-color (quote mode-line-buffer-id))
    '(frame-background-mode (quote dark))
    '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
    '(highlight-symbol-colors
      (--map
       (solarized-color-blend it "#fdf6e3" 0.25)
       (quote
        ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
    '(highlight-symbol-foreground-color "#586e75")
    '(highlight-tail-colors
      (quote
       (("#eee8d5" . 0)
        ("#B4C342" . 20)
        ("#69CABF" . 30)
        ("#69B7F0" . 50)
        ("#DEB542" . 60)
        ("#F2804F" . 70)
        ("#F771AC" . 85)
        ("#eee8d5" . 100))))
    '(hl-bg-colors
      (quote
       ("#DEB542" "#F2804F" "#FF6E64" "#F771AC" "#9EA0E5" "#69B7F0" "#69CABF" "#B4C342")))
    '(hl-fg-colors
      (quote
       ("#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3")))
    '(hl-paren-colors (quote ("#2aa198" "#b58900" "#268bd2" "#6c71c4" "#859900")))
    '(magit-diff-use-overlays nil)
    '(nrepl-message-colors
      (quote
       ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
    '(package-selected-packages
      (quote
       (company wgrep wgrep-helm multiple-cursors monokai-theme gnuplot vimish-fold helm helm-core rainbow-delimiters solarized-theme zenburn-theme color-theme-sanityinc-tomorrow yaxception seq revive request pkg-info ox-twbs multi-term log4e helm-swoop git-commit dired+ dash-functional color-theme cl-format better-defaults autotetris-mode)))
    '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
    '(pos-tip-background-color "#eee8d5")
    '(pos-tip-foreground-color "#586e75")
    '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#eee8d5" 0.2))
    '(term-default-bg-color "#fdf6e3")
    '(term-default-fg-color "#657b83")
    '(vc-annotate-background nil)
    '(vc-annotate-background-mode nil)
    '(vc-annotate-color-map
      (quote
       ((20 . "#f2777a")
        (40 . "#f99157")
        (60 . "#ffcc66")
        (80 . "#99cc99")
        (100 . "#66cccc")
        (120 . "#6699cc")
        (140 . "#cc99cc")
        (160 . "#f2777a")
        (180 . "#f99157")
        (200 . "#ffcc66")
        (220 . "#99cc99")
        (240 . "#66cccc")
        (260 . "#6699cc")
        (280 . "#cc99cc")
        (300 . "#f2777a")
        (320 . "#f99157")
        (340 . "#ffcc66")
        (360 . "#99cc99"))))
    '(vc-annotate-very-old-color nil)
    '(weechat-color-list
      (quote
       (unspecified "#fdf6e3" "#eee8d5" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#657b83" "#839496")))
    '(xterm-color-names
      ["#eee8d5" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#073642"])
    '(xterm-color-names-bright
      ["#fdf6e3" "#cb4b16" "#93a1a1" "#839496" "#657b83" "#6c71c4" "#586e75" "#002b36"]))
   (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    ;'(flyspell-incorrect ((t (:foreground "gray"))))
    '(flyspell-incorrect ((t (:underline "red"))))
    '(rainbow-delimiters-depth-1-face ((t (:foreground "red"))))
    '(rainbow-delimiters-depth-2-face ((t (:foreground "orange"))))
    '(rainbow-delimiters-depth-3-face ((t (:foreground "yellow"))))
    '(rainbow-delimiters-depth-4-face ((t (:foreground "green"))))
    '(rainbow-delimiters-depth-5-face ((t (:foreground "blue"))))
    '(rainbow-delimiters-depth-6-face ((t (:foreground "indigo"))))
    '(rainbow-delimiters-depth-7-face ((t (:foreground "violet"))))
    '(rainbow-delimiters-depth-8-face ((t (:foreground "magenta"))))
    '(rainbow-delimiters-depth-9-face ((t (:foreground "cyan"))))
    '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-unmatched-face :foreground "gray"))))
    '(rainbow-delimiters-unmatched-face ((t (:foreground "gray")))))
#+END_SRC
** Yes-or-No to y-or-n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Blinking Cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :hook
    (after-init . powerline-default-theme)
    )
#+END_SRC
** Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :defer t
    :ensure t
    :bind
    ("C-x o" . ace-window)
    )
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :init 
    (pdf-tools-install)
    ;:config
    ;(setq-default pdf-view-display-size 'fit-page)
    )
#+END_SRC
* Appearance
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :init (color-theme-sanityinc-tomorrow-bright))
#+END_SRC
